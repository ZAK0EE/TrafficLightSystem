
TrafficLightSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000224  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008c9  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000635  00000000  00000000  00000bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000542  00000000  00000000  0000122e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  00001770  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039d  00000000  00000000  00001950  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000372  00000000  00000000  00001ced  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000205f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 af 00 	jmp	0x15e	; 0x15e <__vector_4>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 42 00 	call	0x84	; 0x84 <main>
  74:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <toggle>:
#include "MCAL/timer/timer.h"

// toggle PORTB status
void toggle() {

	PORTB = ~PORTB;
  7c:	88 b3       	in	r24, 0x18	; 24
  7e:	80 95       	com	r24
  80:	88 bb       	out	0x18, r24	; 24
  82:	08 95       	ret

00000084 <main>:
}

int main(void)
{
		// set all pins of PORTB as output
		DDRB = 0xff;
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	87 bb       	out	0x17, r24	; 23
		PORTB = 0xff;
  88:	88 bb       	out	0x18, r24	; 24
	// toggle PORTB every 500ms (using 16Mhz clock)
	timer1(TIMER1_PRESCALER_1024, 39063U, toggle);
  8a:	4e e3       	ldi	r20, 0x3E	; 62
  8c:	50 e0       	ldi	r21, 0x00	; 0
  8e:	67 e9       	ldi	r22, 0x97	; 151
  90:	78 e9       	ldi	r23, 0x98	; 152
  92:	85 e0       	ldi	r24, 0x05	; 5
  94:	0e 94 75 00 	call	0xea	; 0xea <timer1>
	
		// enable
		sei();
  98:	78 94       	sei
  9a:	ff cf       	rjmp	.-2      	; 0x9a <main+0x16>

0000009c <__vector_10>:
}

ERROR_H timer2_stop() {
	TCCR2 = 0;
	return OK;
}
  9c:	1f 92       	push	r1
  9e:	0f 92       	push	r0
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	0f 92       	push	r0
  a4:	11 24       	eor	r1, r1
  a6:	2f 93       	push	r18
  a8:	3f 93       	push	r19
  aa:	4f 93       	push	r20
  ac:	5f 93       	push	r21
  ae:	6f 93       	push	r22
  b0:	7f 93       	push	r23
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
  b6:	af 93       	push	r26
  b8:	bf 93       	push	r27
  ba:	ef 93       	push	r30
  bc:	ff 93       	push	r31
  be:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <_edata>
  c2:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <_edata+0x1>
  c6:	09 95       	icall
  c8:	ff 91       	pop	r31
  ca:	ef 91       	pop	r30
  cc:	bf 91       	pop	r27
  ce:	af 91       	pop	r26
  d0:	9f 91       	pop	r25
  d2:	8f 91       	pop	r24
  d4:	7f 91       	pop	r23
  d6:	6f 91       	pop	r22
  d8:	5f 91       	pop	r21
  da:	4f 91       	pop	r20
  dc:	3f 91       	pop	r19
  de:	2f 91       	pop	r18
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <timer1>:
  ea:	99 b7       	in	r25, 0x39	; 57
  ec:	9f 7e       	andi	r25, 0xEF	; 239
  ee:	99 bf       	out	0x39, r25	; 57
  f0:	50 93 65 00 	sts	0x0065, r21	; 0x800065 <_t1_func+0x1>
  f4:	40 93 64 00 	sts	0x0064, r20	; 0x800064 <_t1_func>
  f8:	7b bd       	out	0x2b, r23	; 43
  fa:	6a bd       	out	0x2a, r22	; 42
  fc:	1f bc       	out	0x2f, r1	; 47
  fe:	88 60       	ori	r24, 0x08	; 8
 100:	8e bd       	out	0x2e, r24	; 46
 102:	1d bc       	out	0x2d, r1	; 45
 104:	1c bc       	out	0x2c, r1	; 44
 106:	89 b7       	in	r24, 0x39	; 57
 108:	80 61       	ori	r24, 0x10	; 16
 10a:	89 bf       	out	0x39, r24	; 57
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	08 95       	ret

00000110 <__vector_7>:
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	2f 93       	push	r18
 11c:	3f 93       	push	r19
 11e:	4f 93       	push	r20
 120:	5f 93       	push	r21
 122:	6f 93       	push	r22
 124:	7f 93       	push	r23
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
 12a:	af 93       	push	r26
 12c:	bf 93       	push	r27
 12e:	ef 93       	push	r30
 130:	ff 93       	push	r31
 132:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <_t1_func>
 136:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <_t1_func+0x1>
 13a:	09 95       	icall
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	bf 91       	pop	r27
 142:	af 91       	pop	r26
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	7f 91       	pop	r23
 14a:	6f 91       	pop	r22
 14c:	5f 91       	pop	r21
 14e:	4f 91       	pop	r20
 150:	3f 91       	pop	r19
 152:	2f 91       	pop	r18
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <__vector_4>:

#ifdef ENABLE_TIMER2

ISR(TIMER2_COMP_vect) {
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	2f 93       	push	r18
 16a:	3f 93       	push	r19
 16c:	4f 93       	push	r20
 16e:	5f 93       	push	r21
 170:	6f 93       	push	r22
 172:	7f 93       	push	r23
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
 178:	af 93       	push	r26
 17a:	bf 93       	push	r27
 17c:	ef 93       	push	r30
 17e:	ff 93       	push	r31
	_t2_func();
 180:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <_t2_func>
 184:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <_t2_func+0x1>
 188:	09 95       	icall
}
 18a:	ff 91       	pop	r31
 18c:	ef 91       	pop	r30
 18e:	bf 91       	pop	r27
 190:	af 91       	pop	r26
 192:	9f 91       	pop	r25
 194:	8f 91       	pop	r24
 196:	7f 91       	pop	r23
 198:	6f 91       	pop	r22
 19a:	5f 91       	pop	r21
 19c:	4f 91       	pop	r20
 19e:	3f 91       	pop	r19
 1a0:	2f 91       	pop	r18
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <_exit>:
 1ac:	f8 94       	cli

000001ae <__stop_program>:
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <__stop_program>
